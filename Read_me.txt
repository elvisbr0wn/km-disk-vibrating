This is a file system with all the folders in the right structure to run the kinematic match simulations. This is structure is important because the programmes use the relative paths to pull data from different folders. This makes one's life much easier when doing parameter sweeps and the subsequent post-processing. Let me explain what you will find in each folder and what you will need to run to get things started. These folders contain all Matlab .m files that are needed to generate the data that is used in the simulations.

Inside the folder Sphere_impacts_template you will find a folder named...

D100Quant50: this stands for a domain whose diameter is 100 droplet diameters and for which, the refinement of the radial mesh is so that it has 50 mesh intervals in one droplet radius. In this folder there is a file called DomainMaker.m you need to run that one and it will fill the folder with all the .mat files that are associated to a domain of such size and with such refinement I would advise that you do not modify this program, as modifications would require re-computing the DtN matrix. There is a second .m file called ParaRadDTNStops.m I would advise that you do not run this file. This is a massive pre-computation that will result in the Dirichlet-to-Neumann matrix. I ran this in a super computer for many hours to obtain the matrix. The result is a big, full matrix that has already been placed in the D100Quant50 folder. This matrix is computed once for every given domain and given spatial discretization, once you have it you can forget about the complex process of obtianing it. In the folder there will also be a small .mat file called refp.mat, this is another output of ParRadDTNStops.m, and it is already there, so you do not need to run it. Inside this D100Quant50, there will be a folder called....
rho1000sigma7197nu89muair0: within this folder you will find everything that is needed for runs with liquids of rho = 1000 kg/m^3, surface tension = 71.97 N/m, kinematic viscosity = 8.9E-3 and with zero air viscosity. So basically water at room temperature and neglecting air resistance. Inside this folder you will find a file called Bathmaker.m. Please run this file, it will produce the .mat files needed to run simulations with water at room temperature. If you wanted to experiment with another fluid, all you would have to do is copy this folder and paste the result alongside it and change the BathMaker.m program as needed (the contents are very simple and properly commented; also variable names a rather self-evident), and name the copied folder accordingly. Inside rho1000sigma7197nu89muair0, you will also find the folder ...

RhoS1200: This contains all the data needed for simulations that use a sphere with density = 1200 kg/m^3 (and that were impacting on water and that were solved with the domain and discretization of the corresponding folder in which this one is nested into). Inside this folder, you will find RhoSMaker.m which you need to run and it will create the density of the sphere constant. If you want to run a simulation of an impactor of a different density, you just have copy this folder, paste the result along side it and change the RhoSMaker.m in the obvious way, and also change the name of the folder accordingly. Finally, inside this folder you will also find...
Ro0830mm: which contains all that is needed to run simulations for a sphere of radius .830 mm and will contain all results of the runs as well. By now you must have caught up with the logic of the system of file folders, so basically inside you will find RoMaker.m which creates the .mat file with the droplet radius for the simulation, run it. As before, if you need to run a different droplet radius, all you need to do is copy this folder and paste the result alongside it, change RoMaker.m in the obvious way and rename the folder accordingly. Finally, inside this folder you will find...
U60Ang180: Don't worry, you've reached the end now. This folder contains all .m files needed to run a simulation for which the sphere hits the surface of the water at 60 cm/s and for which the contact angle is kept at 180 degrees throughout the simulation. The main file here is called VertPolarExact.m run this and the simulation will run. The programme is made so that it goes through the file system I described, pulling from each folder the necessary parameters and matrices. It then finds all corresponding non-dimensional constants and performs the calculations. File OnePixel.m can be run once the file VertPolarExact.m has finished running and it will give you a trajectory of the south pole, centre of mass and north pole of the sphere, and also the point of the surface just below the south pole. If you run SurfaceSlicesAndDroplet2DVideo it should result in a video animation of the impact. If you need to run a different velocity, all you need to do is copy the folder and paste the result alongside it, change the initial velocity in U0 in VertPolarExact.m (first line after the first if statement) and run it.
I would not be surprised if any part of this explanation is confusing. So, if you try to follow the steps I outlined and something goes wrong, do not despair, it is likely I can help you over email (if the email listed in the paper does not work, reach me at grcarlosa@gmail.com).
Observations:

1) When running a simulation (i.e. a file of the kind of U60Ang180.m) you first need to go to the command window and type:

runNumber = 0; save(‘runNumber.mat’,‘runNumber’)

and hit enter to save this variable in the U60Ang180 folder (or the analogue folder in question). 

2) The variable psMatPer in the stored results is not the same as the variable p_s is the paper, it is actually variable p_s minus the pressure caused by the surface tension jump. This was a more convenient way to programme it but it should be kept in mind when post-processing.

I hope you find this useful and if you run into trouble do not hesitate to contact me.

Carlos
